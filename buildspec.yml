version: 0.2

phases:
  pre_build:
    commands:
      - echo "===== AWS & Docker Versions ====="
      - aws --version
      - docker --version

      - echo "===== Checking Environment Variables ====="
      - echo "ECR_URI: $ECR_URI"
      - echo "IMAGE_TAG: $IMAGE_TAG"
      - echo "DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
      - echo "DOCKER_HUB_PASSWORD length: ${#DOCKER_HUB_PASSWORD}"

      - echo "===== Logging in to Amazon ECR ====="
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_URI || { echo "ECR Login Failed"; exit 1; }

      - echo "===== Logging in to Docker Hub ====="
      - echo -n "$DOCKER_HUB_PASSWORD" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin || { echo "Docker Hub Login Failed"; exit 1; }

      - echo "===== Checking Directory Contents ====="
      - ls -R

  build:
    commands:
      - echo "===== Build Started on $(date) ====="
      - echo "===== Checking for Dockerfile ====="
      - if [ ! -f Dockerfile ]; then echo "Error: Dockerfile not found!"; exit 1; fi
      - cat Dockerfile

      - echo "===== Pulling Base Image from ECR ====="
      - docker pull public.ecr.aws/ubuntu/ubuntu:latest || { echo "Failed to pull base image"; exit 1; }

      - echo "===== Tagging Base Image ====="
      - docker tag public.ecr.aws/ubuntu/ubuntu:latest $ECR_URI:$IMAGE_TAG

      - echo "===== Building Docker Image ====="
      - docker build --pull --no-cache -t $ECR_URI:$IMAGE_TAG . || { echo "Docker Build Failed"; exit 1; }

      - echo "===== Tagging Image for Latest ====="
      - docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:latest

  post_build:
    commands:
      - echo "===== Build Completed on $(date) ====="
      - echo "===== Pushing Docker Images ====="
      - docker push $ECR_URI:$IMAGE_TAG || { echo "Failed to push image: $IMAGE_TAG"; exit 1; }
      - docker push $ECR_URI:latest || { echo "Failed to push image: latest"; exit 1; }

      - echo "===== Creating Image Definition JSON ====="
      - echo '[{"name":"cloudologic","imageUri":"'$ECR_URI:$IMAGE_TAG'"}]' > imageDefinitions.json
      - cat imageDefinitions.json

artifacts:
  files:
    - imageDefinitions.json
    - appspec.yaml
    - buildspec.yml
    - Dockerfile
